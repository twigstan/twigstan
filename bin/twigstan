#!/usr/bin/env php
<?php

declare(strict_types=1);

include $_composer_autoload_path ?? __DIR__ . '/../vendor/autoload.php';

use Composer\InstalledVersions;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Question\ConfirmationQuestion;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Path;
use TwigStan\Application\AnalyzeCommand;
use TwigStan\DependencyInjection\ContainerFactory;

$currentWorkingDirectory = getcwd();

$defaultConfigurationFile = 'twigstan.php';

$input = new ArgvInput();
$configurationArg = $input->getParameterOption(['--configuration', '-c'], null);
$configurationFile = Path::makeAbsolute($configurationArg ?? $defaultConfigurationFile, $currentWorkingDirectory);

$output = new ConsoleOutput();

if ( ! file_exists($configurationFile)) {
    $io = new SymfonyStyle($input, $output);

    if ($configurationArg !== null) {
        $io->error(sprintf('Configuration file "%s" does not exist.', $configurationFile));

        exit(1);
    }

    $io->error('Could not find TwigStan configuration file.');

    if ($io->askQuestion(new ConfirmationQuestion(sprintf('Do you want to create a default configuration file in "%s"?', $configurationFile), true)) === false) {
        exit(1);
    }

    $filesystem = new Filesystem();

    $filesystem->dumpFile(
        $configurationFile,
        $filesystem->readFile(__DIR__ . '/../example/twigstan.php'),
    );

    $io->success(sprintf('Configuration file "%s" has been created.', $configurationFile));

    $twigEnvironmentLoader = Path::join(Path::getDirectory($configurationFile), 'twig-loader.php');
    if ($io->askQuestion(new ConfirmationQuestion(sprintf('Do you want to create a default Twig loader file in "%s"?', $twigEnvironmentLoader), true)) === true) {
        if (InstalledVersions::isInstalled('symfony/framework-bundle')) {
            $filesystem->dumpFile(
                $twigEnvironmentLoader,
                $filesystem->readFile(__DIR__ . '/../example/twig-loader-symfony.php'),
            );
        } else {
            $filesystem->dumpFile(
                $twigEnvironmentLoader,
                $filesystem->readFile(__DIR__ . '/../example/twig-loader.php'),
            );
        }

        $io->success(sprintf('Twig loader file "%s" has been created.', $twigEnvironmentLoader));
    }

    $io->info('Please review the configuration file and the Twig loader file and adjust it to your needs. After that, you can run TwigStan again.');

    exit(1);
}

$factory = ContainerFactory::fromFile(
    getcwd(),
    $configurationFile,
);
$container = $factory->create();

$application = new Application();
$application->setDefaultCommand('analyze');
$application->getDefinition()->addOption(
    new InputOption('configuration', 'c', InputOption::VALUE_REQUIRED, 'The path to the configuration file', $defaultConfigurationFile),
);
$application->add($container->getByType(AnalyzeCommand::class));

exit($application->run($input, $output));
